<?php

/**
 * @file
 * Filter to convert embedded CSS styles into tags.
 */

use \Sabberworm\CSS\Parser;

/**
 * Implements hook_filter_info().
 */
function styletags_filter_filter_info() {
  $filters['styletags_filter'] = array(
    'title' => t('Convert embedded styles into tags'),
    'description' => t('Convert embedded styles into tags using CSS rule-to-tag mapping.'),
    'process callback' => 'styletags_filter_process_callback',
    'tips callback' => 'styletags_filter_tips_callback',
    'settings callback' => 'styletags_filter_settings_callback',
    'default settings' => array(
      'tags_map' => _styletags_filter_mapping_flatten(_styletags_filter_mapping_default()),
      'remove_obsolete' => TRUE,
    ),
  );

  return $filters;
}

/**
 * Implements hook_libraries_info().
 */
function styletags_filter_libraries_info() {
  $libraries['querypath'] = array(
    'name' => 'QueryPath',
    'vendor url' => 'https://github.com/technosophos/querypath',
    'download url' => 'https://github.com/technosophos/querypath/archive/master.zip',
    'path' => 'src',
    'version arguments' => array(
      'file' => 'RELEASE',
      'pattern' => '/([0-9]+\.[0-9]+\.[0-9]+)/',
      'lines' => 10,
      'cols' => 20,
    ),
    'files' => array(
      'php' => array(
        'qp.php',
      ),
    ),
  );

  $libraries['PHP-CSS-Parser'] = array(
    'name' => 'PHP CSS Parser',
    'vendor url' => 'https://github.com/sabberworm/PHP-CSS-Parser',
    'download url' => 'https://github.com/sabberworm/PHP-CSS-Parser/archive/master.zip',
    'path' => 'lib',
    'version arguments' => array(
      'file' => 'CHANGELOG.md',
      'pattern' => '/([0-9]+\.[0-9]+\.[0-9]+).*/',
      'lines' => 10,
      'cols' => 20,
    ),
    'spl_autoload' => TRUE,
  );

  return $libraries;
}

/**
 * Process callback for filter.
 */
function styletags_filter_process_callback($text, $filter, $format, $langcode, $cache, $cache_id) {
  styletags_filter_load_library('querypath');
  styletags_filter_load_library('PHP-CSS-Parser');

  // Prepare configuration from settings.
  $tags_map = _styletags_filter_mapping_parse($filter->settings['tags_map']);
  $remove_obsolete_tags = $filter->settings['remove_obsolete'];

  return _styletags_filter_process_content($text, $tags_map, $remove_obsolete_tags);
}

/**
 * Implements callback_filter_tips().
 */
function styletags_filter_tips_callback($filter, $format, $long = FALSE) {
  if ($long) {
    return t('When embedded styles provided, tags with classes are replaced with relevant tags, which correspond to class rules.');
  }
  else {
    return t('Tags with classes from embedded styles are replaced with appropriate.');
  }
}

/**
 * Implements callback_filter_settings().
 */
function styletags_filter_settings_callback($form, &$form_state, $filter, $format, $defaults) {
  $filter->settings += $defaults;

  $code_example_before = '
<style>
  .myclass {
    font-weight: bold;
  }
</style>
  
<span class="myclass">
  some bold text
</span>
';

  $code_example_after = '
<strong>
  some bold text
</strong>';

  $settings['tags_map'] = array(
    '#type' => 'textarea',
    '#title' => t('Tags to styles mapping'),
    '#default_value' => $filter->settings['tags_map'],
    '#description' => t('A list of tag-to-styles mappings. One mapping per line. Tag divided by pipe (|) from style rules.<br/><br/>
    For example, the mapping <code>strong|font-weight:strong</code> will convert any tags that have class with <code>font-weight:bold</code> CSS rule in it into <code>&lt;strong&gt;</code> tag:<br/>
    !code
    <br>If multiple CSS rules match, tags that are specified on the top of the mapping list will become innermost when replaced in DOM.', array(
      '!code' => '<pre><code>' . htmlentities($code_example_before) . '</code></pre><br/>converted to<br/><pre><code>' . htmlentities($code_example_after) . '</code></pre>',
    )),
  );

  $settings['remove_obsolete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Remove obsolete tags'),
    '#default_value' => $filter->settings['remove_obsolete'],
    '#description' => t('Remove tags that participated in the filtering process (because classes assigned to them were listed in embedded styles) and had all their classes removed making them obsolete. This does not apply to block-level elements.'),
  );

  return $settings;
}

/**
 * Helper to load library file.
 *
 * If 'spl_autoload' is set to TRUE in hook_libraries_info() this function will
 * try to register spl_autoloader callback, if it exists, in format
 * '_MODULENAME_libname_with_underscores_autoloader'.
 *
 * @param string $library_name
 *   Library name.
 */
function styletags_filter_load_library($library_name) {
  $library = libraries_load($library_name);

  if ($library) {
    // Perform spl autoload callback registration, if required.
    if (!empty($library['spl_autoload'])) {
      // Escape library name to use it in callback name.
      $library_safe = strtolower(str_replace(array(' ', '-'), '_', $library_name));
      $spl_autoloader_callback = '_styletags_filter' . '_' . $library_safe . '_autoloader';
      if (function_exists($spl_autoloader_callback)) {
        spl_autoload_register($spl_autoloader_callback);
      }
    }

    // Include library files.
    libraries_load_files($library);
    return;
  }

  throw new Exception(format_string('Could not load @library library', array('@library' => $library_name)));
}

/**
 * Autoloader callback for PHP-CSS-Parser library.
 */
function _styletags_filter_php_css_parser_autoloader($class) {
  $library_path = libraries_get_path('PHP-CSS-Parser');

  $filename = DRUPAL_ROOT . '/' . $library_path . '/lib/' . $class . '.php';
  $filename = str_replace('\\', '/', $filename);

  if (file_exists($filename)) {
    require_once $filename;
  }
}

/**
 * Filter content processor.
 *
 * @param string $text
 *   Text to process.
 * @param array $tags_map
 *   Array of tags mapping.
 * @param bool $remove_obsolete_tags
 *   Flag to remove obsolete tags.
 *
 * @return string
 *   Processed text.
 */
function _styletags_filter_process_content($text, $tags_map, $remove_obsolete_tags) {
  if (empty($text)) {
    return $text;
  }
  
  // Extract styles from text.
  $qp = htmlqp($text);
  $styles = $qp->branch()->find('style')->innerHtml();

  // If no styles were provided, skip processing.
  if (empty($styles)) {
    return $text;
  }

  // Remove style tag since we are working with content only.
  $qp->remove('style');

  // Parse plain text styles into array of CSS rulesets.
  $rule_sets = _styletags_filter_parse_styles($styles);

  // If no valid CSS ruleset was provided, skip processing.
  if (empty($rule_sets)) {
    return $text;
  }

  // Find all tags with set 'class' attribute.
  $block_level_tags = explode(',', 'address,blockquote,center,dir,div,dl,fieldset,form,h1,h2,h3,h4,h5,h6,isindex,menu,noframes,noscript,ol,p,pre,table,ul');
  foreach ($qp->branch()->find('*[class]') as $qp_item) {
    // Get array odf classes.
    $classes = $qp_item->attr('class');
    $classes = explode(' ', $classes);

    // Traverse through classes and check if previously parsed CSS rulesets
    // match.
    foreach ($classes as $class) {
      if (isset($rule_sets[$class])) {
        // Find all tags that match current classes CSS rules.
        $found_tags = array();
        foreach ($rule_sets[$class] as $property => $val) {
          $found_tags = array_merge($found_tags, _styletags_filter_find_tag($tags_map, $property, $val));
        }

        // Order tags by weight, so that topmost tags will become innermost
        // tags in DOM.
        $found_tags = _styletags_filter_sort_array_by_array($found_tags, array_keys($tags_map));

        // Remove current class.
        $qp_item->removeClass($class);

        // Wrap current item with found tags.
        // @todo: Add support for attributes in tags so that it would be
        // possible to replace classes with inline styles.
        foreach ($found_tags as $found_tag) {
          $found_tag_full = '<' . $found_tag . '></' . $found_tag . '>';
          $qp_item->wrapInner($found_tag_full);
        }

        // Get leftover classes for this iteration.
        $classes_left = $qp_item->branch()->attr('class');

        // Current tag's tag name.
        $tag = $qp_item->tag();

        // Remove current tag if it:
        // - Had classes from given styles (would not reach here if didn't
        //   have those classes).
        // - Had all classes removed.
        // - Not a block-level tag.
        // - Global setting allows removal.
        if ($remove_obsolete_tags && !empty($found_tags) && empty($classes_left) && !in_array($tag, $block_level_tags)) {
          $qp_item->children()->branch()->unwrap();
        }
      }
    }
  }

  // Since QueryPath always wraps any provided HTML with full doctype, retrieve
  // result as inner HTML.
  $text = $qp->find('body')->innerHTML();

  return $text;
}

/**
 * Parse text-base styles into array of CSS rulesets.
 *
 * @param string $styles
 *   String styles as text.
 *
 * @return array
 *   Array of CSS rulesets with class names as keys and array of rule => value
 *   values.
 */
function _styletags_filter_parse_styles($styles) {
  $rules = array();

  $cdata = '/(<!\[CDATA\[|\]\]>)/i';
  $styles = preg_replace($cdata, '', $styles);

  // Init parser and parse styles.
  $css_parser = new Parser($styles);
  $css_document = $css_parser->parse();

  // Create array of CSS rulesets with property and values as child arrays.
  foreach ($css_document->getAllRuleSets() as $rule_set) {
    foreach ($rule_set->getSelectors() as $selector) {
      $rule_set_name = (string) $selector;
      // Skip non-classes CSS rulesets.
      if (strpos($rule_set_name, '.') !== 0) {
        continue;
      }
      $rule_set_name_no_dot = ltrim($rule_set_name, '.');
      $rules[$rule_set_name_no_dot] = array();
      foreach ($rule_set->getRules() as $rule) {
        $rule_name = (string) $rule->getRule();
        $rule_value = (string) $rule->getValue();
        $rules[$rule_set_name_no_dot][$rule_name] = $rule_value;
      }
    }
  }

  return $rules;
}

/**
 * Find all map tags that have both specified CSS rule and value.
 *
 * @param array $map
 *   Array of tag to CSS rule mapings.
 * @param string $property
 *   String CSS property to search for.
 * @param string $value
 *   String CSS property value to search for.
 *
 * @return array
 *   Array of matched tags or empty array if no tags matched.
 */
function _styletags_filter_find_tag($map, $property, $value) {
  $found_tags = array();
  foreach ($map as $tag => $map_rules) {
    foreach ($map_rules as $map_property => $map_value) {
      if ($map_property == $property && $map_value == $value) {
        $found_tags[] = $tag;
      }
    }
  }

  return array_unique($found_tags);
}

/**
 * Helper to parse filter settings into expected array structure.
 */
function _styletags_filter_mapping_parse($text) {
  $map = drupal_static(__FUNCTION__);

  if (!$map) {
    $map = array();
    $lines = preg_split('/\R/', trim($text));
    foreach ($lines as $line) {
      list($tag, $css_rule) = explode('|', $line);
      list($css_prop, $css_value) = explode(':', $css_rule);
      $tag = trim($tag);
      $css_prop = trim($css_prop);
      $css_value = trim($css_value);

      if (!empty($tag) && !empty($css_prop) && !empty($css_value)) {
        $map[$tag][$css_prop] = $css_value;
      }
    }
  }

  return $map;
}

/**
 * Helper to flatten mapping array to become suitable for form value.
 */
function _styletags_filter_mapping_flatten($map) {
  $output = '';
  foreach ($map as $tag => $rules) {
    foreach ($rules as $property => $value) {
      $output .= $tag;
      $output .= '|';
      $output .= $property;
      $output .= ':';
      $output .= $value;
      $output .= PHP_EOL;
    }
  }

  return $output;
}

/**
 * Default filter mapping.
 */
function _styletags_filter_mapping_default() {
  return array(
    'strong' => array(
      'font-weight' => 'bold',
    ),
    'em' => array(
      'font-style' => 'italic',
    ),
  );
}

/**
 * Helper to sort array values by values in another array.
 *
 * @param array $sortable
 *   Array of values to be sorted.
 * @param array $order
 *   Array of values to be a source of values order.
 *
 * @return array
 *   Combined array of ordered and not found unordered items. Ordered items
 *   always go first.
 */
function _styletags_filter_sort_array_by_array($sortable, $order) {
  $ordered = array();

  $sortable = array_unique($sortable);

  foreach ($order as $o) {
    $found = array_search($o, $sortable);
    if ($found !== FALSE) {
      $ordered[] = $sortable[$found];
      unset($sortable[$found]);
    }
  }

  return array_merge($ordered, $sortable);
}
